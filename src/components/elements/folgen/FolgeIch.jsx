import React, { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import avatar from '../../images/png-transparent-default-avatar-thumbnail.png';

import "./followings.scss";

const FolgeIch = () => {
	const { token, username } = useSelector((state) => state.user);
	const [followings, setFollowings] = useState([]);
	const [selectedUser, setSelectedUser] = useState(null); // –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	const [loading, setLoading] = useState(true);
	const [error, setError] = useState(null);
	const navigate = useNavigate();
	
	useEffect(() => {
		if (!token || !username) {
			setError("‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
			setLoading(false);
			return;
		}
		
		const fetchFollowings = async () => {
			try {
				console.log(`üîç –ó–∞–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${username}`);
				
				const response = await fetch(`http://49.13.31.246:9191/followings/${username}`, {
					method: "GET",
					headers: {
						"Content-Type": "application/json",
						"x-access-token": token,
					},
				});
				
				if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞: ${response.status}`);
				
				let data = await response.json();
				console.log("üì• –û–¢–í–ï–¢ –°–ï–†–í–ï–†–ê (followings):", data);
				
				if (data && Array.isArray(data.following)) {
					console.log("‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:", data.following);
					setFollowings([...data.following]);
				} else {
					console.warn("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç.");
					setFollowings([]);
				}
			} catch (err) {
				console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫:", err.message);
				setError(err.message);
			} finally {
				setLoading(false);
			}
		};
		
		fetchFollowings();
	}, [token, username]);
	
	// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	const fetchUserDetails = async (user) => {
		try {
			const response = await fetch(`http://49.13.31.246:9191/user/${user.username}`, {
				method: "GET",
				headers: {
					"Content-Type": "application/json",
					"x-access-token": token,
				},
			});
			if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è");
			
			const data = await response.json();
			setSelectedUser(data);
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
		}
	};
	
	// üìå –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é
	const handleUserClick = (user) => {
		navigate(`/user/${user.username}`);
		fetchUserDetails(user);
	};
	
	if (loading) return <div className="loading">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...</div>;
	if (error) return <div className="error-msg">{error}</div>;
	
	return (
		<div className="following-list-container">
			<h2>üìå –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏</h2>
			<div className="following-list">
				{followings.length > 0 ? (
					followings.map((follow) => (
						<div key={follow._id} className="following-item" onClick={() => handleUserClick(follow)}>
							<img src={follow.avatar || avatar} alt="–ê–≤–∞—Ç–∞—Ä" className="following-avatar" />
							<div className="follower-info">
								<p>@{follow.username}</p>
							</div>
						</div>
					))
				) : (
					<p className="no-followings">–í—ã –ø–æ–∫–∞ –Ω–∏ –Ω–∞ –∫–æ–≥–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã</p>
				)}
			</div>
			
			{/* ‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
			{selectedUser && (
				<div className="user-card">
					<img src={selectedUser.avatar || "https://via.placeholder.com/100"} alt="Avatar" />
					<h3>{selectedUser.fullName} (@{selectedUser.username})</h3>
					<p><strong>–í–æ–∑—Ä–∞—Å—Ç:</strong> {selectedUser.age}</p>
					<p><strong>–û —Å–µ–±–µ:</strong> {selectedUser.bio}</p>
					<p><strong>–ë–∞–ª–∞–Ω—Å:</strong> {selectedUser.balance} üí∞</p>
					<p><strong>–ü–æ—Å—Ç–æ–≤:</strong> {selectedUser.posts_count}</p>
					<p><strong>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:</strong> {selectedUser.followers}</p>
					<p><strong>–ü–æ–¥–ø–∏—Å–∫–∏:</strong> {selectedUser.following}</p>
					<button onClick={() => setSelectedUser(null)}>‚ùå –ó–∞–∫—Ä—ã—Ç—å</button>
				</div>
			)}
		</div>
	);
};

export default FolgeIch;
