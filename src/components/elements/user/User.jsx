import React, { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import avatar from '../../images/png-transparent-default-avatar-thumbnail.png'
import "./user.scss";

const User = () => {
	const { token, user } = useSelector((state) => state.user);
	const [users, setUsers] = useState([]);
	const [loading, setLoading] = useState(true);
	const [error, setError] = useState(null);
	const [following, setFollowing] = useState(new Set()); // ‚úÖ –•—Ä–∞–Ω–∏—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∫–∞–∫ Set
	
	// üìå –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	useEffect(() => {
		if (!token) {
			setError("‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.");
			setLoading(false);
			return;
		}
		
		const fetchUsers = async () => {
			try {
				const response = await fetch("http://49.13.31.246:9191/users", {
					method: "GET",
					headers: {
						"Content-Type": "application/json",
						"x-access-token": token,
					},
				});
				if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞: ${response.status}`);
				
				const data = await response.json();
				
				// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–æ–π ID –≤ followers –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				const myFollowing = new Set();
				data.forEach((u) => {
					if (u.followers && u.followers.some((f) => f.fromUser === user)) {
						myFollowing.add(u.username);
					}
				});
				
				setUsers(data);
				setFollowing(myFollowing); // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
			} catch (err) {
				setError(err.message);
			} finally {
				setLoading(false);
			}
		};
		
		fetchUsers();
	}, [token]);
	
	// üìå –ü–æ–¥–ø–∏—Å–∫–∞ / –û—Ç–ø–∏—Å–∫–∞
	const toggleFollow = async (username) => {
		const isFollowing = following.has(username);
		const url = `http://49.13.31.246:9191/${isFollowing ? "unfollow" : "follow"}`;
		
		try {
			const response = await fetch(url, {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
					"x-access-token": token,
				},
				body: JSON.stringify({ username }),
			});
			if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ ${isFollowing ? "–æ—Ç–ø–∏—Å–∫–∏" : "–ø–æ–¥–ø–∏—Å–∫–∏"}`);
			
			setFollowing((prev) => {
				const updatedSet = new Set(prev);
				if (isFollowing) {
					updatedSet.delete(username);
				} else {
					updatedSet.add(username);
				}
				return updatedSet;
			});
		} catch (err) {
			console.error(err.message);
		}
	};
	
	// üìå UI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∏
	if (loading) return <div className="loading">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...</div>;
	if (error) return <div className="error-msg">{error}</div>;
	
	return (
		<div className="user-list-container col-3 ">
			<h2 className='uberschrift_user'>üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h2>
			<div className="user-list">
				{users.map((userItem) => (
					<div key={userItem._id} className="user-item">
						<img src={userItem.avatar || avatar} alt="–ê–≤–∞—Ç–∞—Ä" className="user-avatar" />
						<div className="user-info">
							<h4>{userItem.fullName || "–ë–µ–∑ –∏–º–µ–Ω–∏"}</h4>
							<p>@{userItem.username}</p>
						</div>
						<button
							className={`follow-btn ${following.has(userItem.username) ? "following" : ""}`}
							onClick={() => toggleFollow(userItem.username)}
						>
							{following.has(userItem.username) ? "‚úÖ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è" : "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"}
						</button>
					</div>
				))}
			</div>
		</div>
	);
};

export default User;
